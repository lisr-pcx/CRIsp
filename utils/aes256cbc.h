//============================================================================
// Name        : aes256cbc.h
// Author      : lisr-pcx
// MIT License (c) 2024 lisr-pcx
//
// CRIsp
// (CRIttografia senza pretese)
//
// This class is based on the work of user "kokke" on ""tiny-AES-c":
// https://github.com/kokke/tiny-AES-c
//============================================================================

#ifndef AES256CBC_H
#define AES256CBC_H

#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <QByteArray>

/**
 * Current ecnryption/decryption available:
 *
 *      AES-256 CBC (Cipher Block Chaining)
 *      key length (array): 32 bytes
 *      IV (array): 16 bytes
 */
class AES256CBC
{
public:
    static constexpr unsigned int localKeySize = 32;
    static constexpr unsigned int localIVSize = 16;
    static constexpr unsigned int localRoundKeySize = 240;

    /**
     * @brief Class constructor, init with default values
     */
    AES256CBC();

    /**
     * @brief Class constructor, init with user parameters
     * @param key: array of 32 bytes
     * @param iv: array of 16 bytes
     * @return
     */
    AES256CBC(QByteArray key, QByteArray iv);

    /**
     * @brief Init with user parameters
     * @param key: array of 32 bytes
     * @param iv: array of 16 bytes
     * @return
     */
    void init(QByteArray key, QByteArray iv);

    /**
     * @brief Encrypt the input data (by overwriting each byte)
     * @param data: array of bytes to encrypt
     * @return
     */
    void encryptData(QByteArray& data);

    /**
     * @brief Decrypt the input data (by overwriting each byte)
     * @param data: array of bytes to decrypt
     * @return
     */
    void decryptData(QByteArray& data);

private:
    typedef uint8_t state_t[4][4]; // array holding the intermediate results during decryption

    static constexpr unsigned int Nb = 4;
    static constexpr unsigned int Nk = 8;
    static constexpr unsigned int Nr = 14;

    uint8_t localKey[localKeySize];
    uint8_t localIV[localIVSize];               // block length in bytes (AES is 128b block only)
    uint8_t localRoundKey[localRoundKeySize];   // key expansion

    // The lookup-tables are marked const so they can be placed in read-only storage instead of RAM
    // The numbers below can be computed dynamically trading ROM for RAM -
    // This can be useful in (embedded) bootloader applications, where ROM is often limited.

    const uint8_t sbox[256] = {
        //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

    const uint8_t rsbox[256] = {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };

    // The round constant word array, Rcon[i], contains the values given by
    // x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)

    const uint8_t Rcon[11] = { 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

    /*
     * This function encrypt byte after byte the
     * input buffer by overwriting it.
     */
    void encrypt(uint8_t* buffer, size_t length);

    /*
     * This function decrypt byte after byte the
     * input buffer by overwriting it.
     */
    void decrypt(uint8_t* buffer, size_t length);

    /*
     * This function produces Nb(Nr+1) round keys.
     * The round keys are used in each round to
     * decrypt the states.
     */
    void keyExpansion(uint8_t* RoundKey, uint8_t* Key);

    /*
     * get element of sbox[]
     * get element of rsbox[] <- invert of sbox
     * FIXME make inline or get rid of this...
     */
    uint8_t getSBoxValue(uint8_t num);
    uint8_t getRSBoxValue(uint8_t num);

    /*
     * XOR operation with IV
     */
    void xorWithIv(uint8_t* buf, uint8_t* Iv);

    /*
     * This is the main function that encrypts
     * the input buffer.
     */
    void runCipher(state_t* state, uint8_t* RoundKey);

    /*
     * This is the main function that decrypts
     * the input buffer.
     */
    void runInvCipher(state_t* state, uint8_t* RoundKey);

    /*
     * This function adds the round key to state.
     * The round key is added to the state by an XOR function.
     */
    void addRoundKey(uint8_t round, state_t* state, uint8_t* RoundKey);

    /*
     * The function substitutes the values in the
     * state matrix with values in an S-box.
     */
    void subBytes(state_t* state);

    /*
     * Similar to subBytes but to use when decrypting
     */
    void invSubBytes(state_t* state);

    /*
     * The function shifts the rows in the state to the left.
     * Each row is shifted with different offset.
     * Offset = Row number. So the first row is not shifted.
     */
    void shiftRows(state_t* state);

    /*
     * Similar to shiftRows but to use when decrypting.
     */
    void invShiftRows(state_t* state);

    /*
     * The function mixes the columns of the state matrix
     */
    void mixColumns(state_t* state);

    /*
     * Similar to mixColumns but to use when decrypting
     */
    void invMixColumns(state_t* state);

    /*
     * Used by 'multiply'
     */
    uint8_t xTime(uint8_t x);

    /*
     * This function is used to multiply numbers
     * in the field GF(2^8)
     */
    uint8_t multiply(uint8_t x, uint8_t y);
};

#endif // AES256CBC_H
